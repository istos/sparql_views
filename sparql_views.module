<?php
// $Id$

/**
 * SPARQL Views
 *
 * The SPARQL Views module enables the creation of SPARQL queries in Views.
 * SPARQL is a query language for accessing RDF datastores, frequently to access
 * remote datastores using HTTP.
 */

include_once (drupal_get_path('module', 'rdfx') .'/rdfx.sparql.inc');
include_once (drupal_get_path('module', 'rdfx') .'/rdfx.import.inc');

/**
 * Implements hook_views_api().
 */
function sparql_views_views_api() {
  return array(
    'api' => '3.0-alpha1',
  );
}

/**
 * Implements hook_menu().
 */
function sparql_views_menu() {
  $items['get-predicates'] = array(
    'title' => 'Temporary page for SVUI development',
    'page callback' => 'sparql_views_get_predicates',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sparql_views.pages.inc',
  );
  $items['admin/build/sparql_views/add/%ctools_js'] = array(
    'title' => 'Add',
    'page callback' => 'sparql_views_add_query_modal',
    'page arguments' => array(4),
    'access arguments' => array('administer views'),
    'type' => MENU_CALLBACK,
    'file' => 'sparql_views.pages.inc',
  );
  $items['sparql_views/autocomplete/subject-object/%/%'] = array(
    'title' => 'SPARQL variables autocomplete',
    'page callback' => 'sparql_views_variables_autocomplete',
    'access arguments' => array('administer views'),
    'type' => MENU_CALLBACK,
    'file' => 'sparql_views.pages.inc',
  );
  $items['sparql_views/autocomplete/predicate'] = array(
    'title' => 'SPARQL variables autocomplete',
    'page callback' => 'sparql_views_predicates_autocomplete',
    'access arguments' => array('administer views'),
    'type' => MENU_CALLBACK,
    'file' => 'sparql_views.pages.inc',
  );
  $items['sparql_views/prefixes/autocomplete'] = array(
    'title' => 'Endpoint predicate loader',
    'page callback' => 'sparql_views_autocomplete_prefixes',
    'access arguments' => array('administer views'),
    'type' => MENU_CALLBACK,
    'file' => 'sparql_views.pages.inc',
  );

  return $items;
}

function sparql_views_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'sparql_views');
  $base = array(
    'path' => "$path/theme",
  );

  $hooks['sparql_views_ui'] = $base + array(
    'template' => 'sparql_views_ui',
    'arguments' => array(),
  );

  return $hooks;
}

/*
 * Helper function to retrieve the variables that have been entered in filters.
 * These variables are used as the fields in Views.
 */
function _sparql_views_get_fields($view = NULL, $display_name = NULL) {
  $fields = array();
  $sparql_view_names = array();

  $display_name = ($view != NULL && $display_name == NULL) ? 'default' : $display_name;

  if ($view != NULL) {
    $select_clause = $view->display[$display_name]->display_options['query']['options']['select_clause'];
    if ($select_clause == NULL) {
      $select_clause = $view->display['default']->display_options['query']['options']['select_clause'];
    }
    $parsed_clause = _sparql_views_parse_query($select_clause);
    return $parsed_clause['vars'];
  }

  //@todo Move this to _sparql_views_get_all_fields which could be Drupal static.
  // @todo make logic more elegant.
  else {
    $views = views_get_all_views();
    foreach ($views as $view_name => $view) {
      $query_type = $view->display['default']->display_options['query']['type'];
      if ($query_type == 'sparql_query') {
        foreach ($view->display as $display) {
          $select_clause = $display->display_options['query']['options']['select_clause'];
          if (isset($select_clause)) {
            $parsed_clause = _sparql_views_parse_query($select_clause);
            $fields = array_merge($parsed_clause['vars'], $fields);
          }
        }
      }
    }
  }

  return $fields;
}

function _sparql_views_get_filters($view = NULL, $display_name = NULL) {
  $fields = array();

  $default_filters = $view->display['default']->display_options['filters'];
  $display_filters = $view->display[$display_name]->display_options['filters'];

  // If where clauses haven't been added to the default or the display, there
  // are no added fields.
  if (empty($default_filters) && empty($display_filters)) {
    return array();
  }
  // Else, if where clauses have been added to the default but not to the
  // display, use the default where clauses.
  else if (empty($display_filters)) {
    $display_filters = $default_filters;
  }

  // Iterate through the where clauses and pull out the variables.
  foreach ($display_filters as $filter) {
    // If there is an empty Where clause, $filter will not have values.
    if (!empty($filter['value'])) {
      foreach ($filter['value'] as $value) {
        if (strpos($value, '?') === 0) {
          $field = substr($value, 1);
          $fields[$field] = $field;
        }
      }
    }
  }

  return $fields;
}

/*
 * Get namespace mappings from prefix.cc.
 * @todo This functionality still needs to be implemented.
 */
function _sparql_views_fetch_prefixes() {
  // @todo Use Drupal cache.
  $results = rdfx_fetch_rdf('http://prefix.cc/popular/all.rdf.plain', 'prefix');
  return $results[1];
}

function _sparql_views_parse_query($query) {
  $parser = ARC2::getSPARQLParser();
  // @todo Actually pull in prefixes.
  $q = "PREFIX foaf: <http://xmlns.com/foaf/0.1/> $query";
  $parser->parse($q);
  if (!$parser->getErrors()) {
    $parsed_query = $parser->getQueryInfos();
  }
  return $parsed_query;
}