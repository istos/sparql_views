<?php
// $Id:  $

/**
 * @file
 * Defines RSA public key field types.
 */

/**
 * Implements hook_help().
 */
function rsapublickey_help($path, $arg) {
  switch ($path) {
    case 'admin/help#rsapublickey':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The RSA public key module defines a field type for the Field module useful to store RSA public keys which can be used to authenticate of the Web using the FOAF+SSL protocol. Each public key is composed of a certificate containing hexadecimal characters and a module exponent. See the <a href="@field-help">Field module help page</a> for more information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_rdf_namespaces().
 */
function rsapublickey_rdf_namespaces() {
  return array(
    'cert'      => 'http://www.w3.org/ns/auth/cert#',
    'rsa' => 'http://www.w3.org/ns/auth/rsa#',
  );
}

/**
 * Implements hook_field_info().
 */
function rsapublickey_field_info() {
  return array(
    'rsapublickey' => array(
      'label' => t('RSA Public key (FOAF+SSL)'),
      'description' => t('This field stores a RSA public key in the database.'),
      'default_widget' => 'rsapublickey',
      'default_formatter' => 'rsapublickey',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function rsapublickey_field_schema($field) {
  $columns = array();
  switch ($field['type']) {
    case 'rsapublickey' :
      $columns = array(
        'modulus' => array(
          'type' => 'text',
          'size' => 'big',
          'not null' => FALSE,
        ),
        'exponent' => array(
          'type' => 'text',
          'size' => 'big',
          'not null' => FALSE,
        ),
      );
      break;

  }
  return array(
    'columns' => $columns,
  );
}

/**
 * Implements hook_field_is_empty().
 */
function rsapublickey_field_is_empty($item, $field) {
  if (empty($item['modulus']) && empty($item['exponent'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function rsapublickey_field_formatter_info() {
  return array(
    'rsapublickey' => array(
      'label' => t('Default'),
      'field types' => array('rsapublickey'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function rsapublickey_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'rsapublickey':
      foreach ($items as $delta => $item) {
        $output  = '<div about="#cert" typeof="rsa:RSAPublicKey">';
        $output .= '  <span rel="cert:identity" resource="#me"></span>';
        $output .= '  <dl>';
        $output .= '    <dt>Modulus (hexadecimal)</dt>';
        $output .= '    <dd rel="rsa:modulus">';
        $output .= '      <span property="cert:hex">ï»¿' . check_plain($item['modulus']) . '</span>';
        $output .= '    </dd>';
        $output .= '    <dt>Exponent (decimal)</dt>';
        $output .= '    <dd rel="rsa:public_exponent">';
        $output .= '      <span property="cert:decimal">' . check_plain($item['exponent']) . '</span>';
        $output .= '    </dd>';
        $output .= '  </dl>';
        $output .= '</div>';

        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function rsapublickey_field_widget_info() {
  return array(
    'rsapublickey' => array(
      'label' => t('Text field'),
      'field types' => array('rsapublickey'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function rsapublickey_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['modulus'] = array(
    '#type' => 'textarea',
    '#default_value' => isset($items[$delta]['modulus']) ? $items[$delta]['modulus'] : '',
    '#title' => t('Modulo'),
  );
  $element['exponent'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['exponent']) ? $items[$delta]['exponent'] : '',
    '#title' => t('Exponent'),
  );

  return $element;
}
