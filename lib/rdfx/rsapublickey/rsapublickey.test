<?php
// $Id:  $

class RsapublickeyFieldTestCase extends DrupalWebTestCase {
  protected $instance;
  protected $admin_user;
  protected $web_user;

  public static function getInfo() {
    return array(
      'name'  => 'RSA Public Key field',
      'description'  => 'Test the creation of RSA Public Key fields.',
      'group' => 'Field types',
    );
  }

  function setUp() {
    parent::setUp('field_test', 'rsapublickey');

    $this->admin_user = $this->drupalCreateUser(array('administer filters'));
    $this->web_user = $this->drupalCreateUser(array('access field_test content', 'administer field_test content'));
    $this->drupalLogin($this->web_user);
  }

  // Test fields.

  /**
   * Test widgets.
   */
  function testRsapublickeyfieldWidgets() {
    $this->_testRsapublickeyfieldWidgets('rsapublickey', 'rsapublickey');
  }

  /**
   * Helper function for testRsapublickeyfieldWidgets().
   */
  function _testRsapublickeyfieldWidgets($field_type, $widget_type) {
    // Setup a field and instance
    $entity_type = 'test_entity';
    $this->field_name = drupal_strtolower($this->randomName());
    $this->field = array('field_name' => $this->field_name, 'type' => $field_type);
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field_name,
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'label' => $this->randomName() . '_label',
//       'settings' => array(
//         'text_processing' => TRUE,
//       ),
      'widget' => array(
        'type' => $widget_type,
      )
    );
    field_create_instance($this->instance);
    $langcode = LANGUAGE_NONE;

    // Display creation form.
    $this->drupalGet('test-entity/add/test-bundle');
    $this->assertFieldByName("{$this->field_name}[$langcode][0][modulus]", '', t('Widget modulus is displayed'));
    $this->assertFieldByName("{$this->field_name}[$langcode][0][exponent]", '', t('Widget exponent is displayed'));

    // Submit with some values.
    $modulus = 'd1 a0 aa ce ec 9d 69 ed bc 3a 70 0e a6 5a 07 be
dd fb 2b c8 c6 25 21 cc 1e 0c 01 99 86 1a b1 c4
65 ed 0c 87 c6 3a e9 a0 2e 52 0d 77 bf ed ab aa
5e 80 ea e9 b2 dd 13 fd df 67 ce c7 c2 62 17 a5
79 ad 88 08 b5 75 cb e2 25 25 75 81 25 18 1b bd
11 02 19 31 33 07 98 b9 0b 20 03 e1 20 99 cf bd
5a 3d c6 f3 16 76 76 31 60 1b 8e a1 b2 80 58 59
bf 2c ee 3c da 04 d2 4c d2 34 43 46 bb 7a a9 6c
ac 39 07 36 8f 16 86 8b 00 63 14 09 83 64 f0 13
63 2e 99 81 cc b2 95 fb 9e ed d8 0a 0d f9 e9 e8
dd 01 2f ae cd 06 2f 9b 3c 49 8a d8 04 2d 68 e3
4e 82 44 f4 05 8a 35 5c 7d b4 f8 1c 5d 54 57 a5
93 07 a4 78 b3 6c 12 f1 f1 e1 5d 82 70 d3 17 91
95 9b 16 03 98 49 67 88 fd bb d1 d2 65 58 4f 23
23 3e 1e 43 d3 26 89 5b 79 08 9c 97 9c 3f d3 93
d5 f4 22 8d 9e 1e 5d b6 41 ed d0 b6 1e 06 ce 73';
    $exponent = '65537';
    $edit = array(
      "{$this->field_name}[$langcode][0][modulus]" => $modulus,
      "{$this->field_name}[$langcode][0][exponent]" => $exponent,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    preg_match('|test-entity/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), t('Entity was created'));

    // Display the entity.
    $entity = field_test_entity_test_load($id);
    $entity->content = field_attach_view($entity_type, $entity);
    $this->content = drupal_render($entity->content);
    $this->assertText($modulus, 'Filtered tags are not displayed');
    $this->assertText($exponent, 'Filtered tags are not displayed');
  }
}
