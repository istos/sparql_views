<?php
// $Id$

/**
 * @file
 * User interface for RDF.
 */
 
define('RDFUI_CURIE_REGEX',"/^[a-zA-Z0-9]+:[a-zA-Z0-9]+$/");
 
/**
 * Implements hook_help().
 */
function rdfui_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/types/manage/%/rdf':
      return '<p>' . t('Help text', array()) . '</p>';
    case 'admin/help#rdf':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The RDF UI module provides a user interface for altering a bundle\'s RDF mapping.') . '</p>';
    return $output;
  }
}

/**
 * Implements hook_theme().
 */
function rdfui_theme($path, $arg) {
  return array(
  'rdfui_term_autocomplete' => array(
      'render element' => 'term',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function rdfui_permission() {
  return array(
    'administer RDF field mappings' => array(
      'title' => t('Change the RDF mappings for types and fields'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function rdfui_menu() {
  $items = array();
  
  // Create tabs for all possible bundles.
  foreach (entity_get_info() as $entity_type => $info) {
    if ($info['fieldable']) {
      foreach ($info['bundles'] as $bundle_name => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          // Extract informations from the bundle description.
          $path = $bundle_info['admin']['path'];
          $bundle_arg = isset($bundle_info['admin']['bundle argument']) ? $bundle_info['admin']['bundle argument'] : $bundle_name;
          $access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array('access callback', 'access arguments')));
          $instance_position = count(explode('/', $path)) + 1;

          if ($entity_type == 'node') {
            $title = t('Content RDF Mappings');
            $weight = 50;
          }  
          elseif ($entity_type == 'comment') {
            $title = t('Comment RDF Mappings');
            $weight = 60;
          }  
          else {
            $title = t('RDF Mappings');
            $weight = 50;
          }  
                    
          $items["$path/rdf"] = array(
            'title' => $title,
            // @todo Load arguments are not necessary / are cruft, right?
            //'load arguments' => array($obj_type, $bundle_arg),
            'page callback' => 'drupal_get_form',
            'page arguments' => array('rdfui_admin_rdf_overview_form', $entity_type, $bundle_arg, $instance_position),
            'type' => MENU_LOCAL_TASK,
            'weight' => $weight,
          ) + $access;        
        }
      }
    }
  }
  
  $items['rdfui/datatype/autocomplete'] = array(
    'title' => t('RDF datatype autocomplete'),
    'page callback' => 'rdfui_datatype_autocomplete',
    'access arguments' => array('administer RDF field mappings'),
    'type' => MENU_CALLBACK,
  );
  
  $items['rdfui/predicates/autocomplete'] = array(
    'title' => t('RDF predicates autocomplete'),
    'page callback' => 'rdfui_predicates_autocomplete',
    'access arguments' => array('administer RDF field mappings'),
    'type' => MENU_CALLBACK,
  );     
  
  return $items;
}

/**
 * Menu callback; listing of field RDF mappings for a content type.
 *
 * Allows the content type to be mapped to a RDF class and
 * fields to be mapped to RDF properties.
 */
function rdfui_admin_rdf_overview_form($form, &$form_state, $entity_type, $bundle, $instance) {
  $bundle = field_extract_bundle($entity_type, $bundle);
  $fields = field_info_instances($entity_type, $bundle);
  $mapping = rdf_mapping_load($entity_type, $bundle); 

  $form['rdf_rdftype'] = array(
    '#type' => 'textarea',
    '#title' => t('RDF Type'),
  );
  $form['rdf_title'] = array(
    '#type' => 'fieldset',
    '#title' => t('Title'),
  );
  // Add the field for RDF type.
  rdfui_rdftype_fieldset($form['rdf_rdftype'], $mapping);
  // Add the options for Title.
  rdfui_predicate_fieldset($form['rdf_title'], $mapping, 'title', 'title');
  // Add the options for all other fields.
  foreach ($fields as $field) {
    $label = $field['label'];
    $field_name = $field['field_name'];
    $form[$field_name] = array(
      '#type' => 'fieldset',
      '#title' => t('@label', array('@label' => $label)),
    );
    rdfui_predicate_fieldset($form[$field_name], $mapping, $field_name, $label);
  }

  $form['field_names'] = array('#type' => 'value', '#value' => array_keys($fields));
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save RDF mapping'));
  
  drupal_add_js(array('rdfui' => array('termRegex' => RDFUI_CURIE_REGEX)), 'setting'); 

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rdfui_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  
  $field_name = $form['#field']['field_name'];
  $instance = $form['instance'];
  $label = isset($instance['label']) ? $instance['label']['#default_value'] : $instance['field_name'];
  $object_type = $instance['object_type']['#value'];
  
  $mapping = rdf_mapping_load($object_type, $instance['bundle']['#value']);
    
  $form['rdf'] = array(
    '#type' => 'fieldset',
    '#title' => t('@label RDF Mapping', array('@label' => $label)),
  );

  // add the predicate, datatype, etc fields
  rdfui_predicate_fieldset($form['rdf'], $mapping, $field_name, $label);
  
  $form['submit']['#weight'] = 1;
  
  // add submit and validate handlers
  $form['#validate'] = array_merge($form['#validate'], array('rdfui_form_field_ui_field_edit_form_validate'));
  $form['#submit'] = array_merge($form['#submit'], array('rdfui_form_field_ui_field_edit_form_submit'));
  
  drupal_add_js(array('rdfui'=>array('termRegex'=>RDFUI_CURIE_REGEX)), 'setting');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rdfui_form_node_type_form_alter(&$form, &$form_state) {
  $mapping = array();
  // If we are editing an existing content type, the mapping will be available
  // via the bundles in entity info.
  if ($bundle = $form['type']['#default_value']) {
    $entity = entity_get_info('node');
    $mapping = $entity['bundles'][$bundle]['rdf_mapping'];
  }

  $form['rdf_settings'] = array(
    '#type' => 'fieldset',
    '#title' => 'RDF Settings',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings'
  );  
  $form['rdf_settings']['rdf_rdftype'] = array(
    '#type' => 'fieldset',
    '#title' => 'RDF Type',
  );
  $form['rdf_settings']['rdf_title'] = array(
    '#type' => 'fieldset',
    '#title' => 'RDF Title Predicate',
  );
  
  // Add the RDF type field for the bundle.
  rdfui_rdftype_fieldset($form['rdf_settings']['rdf_rdftype'], $mapping);
  //Add the predicate, datatype, property fields for the bundle title.
  rdfui_predicate_fieldset($form['rdf_settings']['rdf_title'], $mapping, 'title', 'title');
  
  // add submit and validate handlers
  $form['#validate'] = array_merge($form['#validate'], array('rdfui_form_node_type_form_validate'));
  $form['#submit'] = array_merge($form['#submit'], array('rdfui_form_node_type_form_submit'));
  
  drupal_add_js(array('rdfui'=>array('termRegex'=>RDFUI_CURIE_REGEX)), 'setting');
}


function rdfui_form_field_ui_field_edit_form_validate($form, &$form_state) {
  $field_name = $form['#field']['field_name'];
  
  _rdfui_validate_terms($form_state, $field_name);
  _rdfui_validate_datatype($form_state, $field_name);
}

function rdfui_admin_rdf_overview_form_validate($form, &$form_state) {
  // Validate bundle's RDF type(s).
  _rdfui_validate_terms($form_state);
  
  // Validate title predicate(s).
  $field_name = 'title';
  _rdfui_validate_terms($form_state, $field_name);
  _rdfui_validate_datatype($form_state, $field_name);
  
  // Validate predicates for all fields.
  foreach ($form_state['values']['field_names'] as $field_name) {
    _rdfui_validate_terms($form_state, $field_name);
    _rdfui_validate_datatype($form_state, $field_name);
  }
}

function rdfui_form_node_type_form_validate($form, &$form_state) {
  // Validate bundle's RDF type(s).
  _rdfui_validate_terms($form_state);
  
  // Validate title predicate(s).
  $field_name = 'title';
  _rdfui_validate_terms($form_state, $field_name);
  _rdfui_validate_datatype($form_state, $field_name);
}

/**
 * Saves RDF mapping for all fields and node type.
 */
function rdfui_admin_rdf_overview_form_submit($form, &$form_state) {
  $entity_type = $form_state['build_info']['args'][0];
  $bundle = $form_state['build_info']['args'][1]->type;
  _rdfui_mapping_save($form_state, $entity_type, $bundle, 'title');

  foreach ($form_state['values']['field_names'] as $field_name) {
    _rdfui_mapping_save($form_state, $entity_type, $bundle, $field_name);
  }
}

/**
 * Saves RDF mapping for individual field.
 */
function rdfui_form_field_ui_field_edit_form_submit($form, &$form_state) {
  $object_type = $form['instance']['object_type']['#value'];
  $bundle = $form['instance']['bundle']['#value'];
  $field_name = $form['#field']['field_name'];
  
  _rdfui_mapping_save($form_state, $object_type, $bundle, $field_name);
}

/**
 * Saves RDF mapping for Title field.
 */
function rdfui_form_node_type_form_submit($form, &$form_state) {
  $entity_type = 'node';
  $bundle = $form_state['input']['type'];
  // We only need to call _rdfui_mapping_save once because it checks whether
  // rdf_type is set in the form before saving the field value.
  _rdfui_mapping_save($form_state, $entity_type, $bundle, 'title');
}

/**
 * Menu callback for datatype autocomplete
 */
function rdfui_datatype_autocomplete($string) {
  
  //@todo Make sure datatype is only active if property is the relationship.
  
  $datatypes = 'xsd:string, xsd:boolean, xsd:decimal, xsd:float, xsd:double, xsd:dateTime, xsd:time, xsd:date, xsd:gYearMonth, xsd:gYear, xsd:gMonthDay, xsd:gDay, xsd:gMonth, xsd:hexBinary, xsd:base64Binary, xsd:anyURI, xsd:normalizedString, xsd:token, xsd:language, xsd:NMTOKEN, xsd:Name, xsd:NCName, xsd:integer, xsd:nonPositiveInteger, xsd:negativeInteger, xsd:long, xsd:int, xsd:short, xsd:byte, xsd:nonNegativeInteger, xsd:unsignedLong, xsd:unsignedInt, xsd:unsignedShort, xsd:unsignedByte, xsd:positiveInteger';
  
  $datatypes = explode(', ', $datatypes);
  $matches = array();
  
  foreach($datatypes as $datatype) {
    if (preg_match("/^$string/", $datatype))
      $matches[$datatype] = $datatype;
  }  
  
  drupal_json_output($matches);
}

/**
 * Menu callback for predicates autocomplete
 */
function rdfui_predicates_autocomplete($string) {
  $predicates = array();
  $predicate_tids = rdfx_get_properties();
  foreach ($predicate_tids as $predicate_tid) {
    $predicate = rdfx_curie($predicate_tid);
    if (preg_match("/$string/", $predicate)) {
      $details = _rdfx_get_term_details($predicate_tid);
      $details->curie = $predicate;
      $matches[$predicate] = theme('rdfui_term_autocomplete', array('term' => $details));
    }
  }
  drupal_json_output($matches);
}

/**
 * appends the rdf form fields to a fieldset dedicated to a fields.module field
 */
function rdfui_predicate_fieldset(&$fieldset, $mapping, $field_name, $label) {
  $fieldset['rdf_'. $field_name .'_predicates'] = array(
    '#type' => 'textarea',
    '#title' => t('RDF Predicates'),
    '#default_value' => empty($mapping[$field_name]['predicates']) ? '' : implode("\n",$mapping[$field_name]['predicates']),
    '#description' => t('Enter the predicate mappings for @label here. Predicates should be listed in CURIE syntax, with the vocabulary namespace and predicate. For example, foaf:name.', array('@label' => $label)),
    '#resizable' => FALSE,
    '#attributes' => array('class' => array('term-store'))
  );
  
  // @todo Possibly autocomplete the builtin xsd datatypes, but do not restrict to xsd datatypes.
  $fieldset['rdf_'. $field_name .'_datatype'] = array(
    '#type' => 'textfield',
    '#title' => t('Datatype'),
    '#autocomplete_path' => 'rdfui/datatype/autocomplete',
    '#default_value' => empty($mapping[$field_name]['datatype']) ? '' : $mapping[$field_name]['datatype'],
    '#description' => t('If there is a datatype for @label, enter it here. You can use !link or other dataypes.',
      array(
        '@label' => $label,
        '!link' => l('XML Schema datatypes', 'http://www.w3.org/TR/2004/REC-rdf-mt-20040210/#dtype_interp', array('attributes' => array('target' => '_blank'))),
      )
    ),
  );

  $fieldset['rdf_'. $field_name .'_type'] = array(
    '#type' => 'select',
    '#title' => t('Attribute Type'),
    '#default_value' => empty($mapping[$field_name]['type']) ? 'property' : $mapping[$field_name]['type'],
    '#description' => t('If a field contains a literal, such as a string or an integer, then the property attribute should be used. If it contains a url or node reference, the !rel or !rev attribute should be used.', array('@label' => $label, '!rel' => l('rel','http://www.w3.org/TR/html401/struct/links.html#adef-rel'), '!rev' => l('rev','http://www.w3.org/TR/html401/struct/links.html#adef-rev'))),
    '#options' => array('property'=>'property', 'rel'=>'rel', 'rev'=>'rev'),
  );
    
  drupal_add_css(drupal_get_path('module', 'rdfui') .'/css/rdfui.css', 'file');
  drupal_add_js(drupal_get_path('module', 'rdfui') .'/js/rdfui.js', 'file');
}

/**
 * Appends the RDF type fieldset. Because this fieldset is always on the same
 * page as fields created by rdfui_predicate_fieldset(), which add the css and
 * js files, we do not add the files again.
 * 
 */
function rdfui_rdftype_fieldset(&$fieldset, $mapping) {
  $fieldset = array(
    '#type' => 'textarea',
    '#title' => t('RDF Type'),
    '#default_value' => empty($mapping['rdftype']) ? '' : implode("\n",$mapping['rdftype']),
    '#description' => t('Enter the RDF type for the bundle here. Classes should be listed in CURIE syntax, with the vocabulary namespace and predicate. For example, sioc:Item.'),
    '#resizable' => FALSE,
    '#attributes' => array('class' => array('term-store'))
  );
    
}

/**
 * Sets a form error if predicates don't validate.
 */
function _rdfui_validate_terms($form_state, $field_name = '') {
  // If the field_name is NOT NULL, then this is a predicate. If it is NULL,
  // this is a type.
  $field_id = $field_name != NULL ? 'rdf_'. $field_name .'_predicates' : 'rdf_rdftype';
  
  // Validate terms.
  if ($terms = trim($form_state['values'][$field_id])) {
    $terms = explode("\n",$terms);
    $error = '';
    foreach($terms as $term) {
      $term = trim($term);      
      if (!preg_match(RDFUI_CURIE_REGEX, $term)){
        // @todo Add a page to the drupal docs about CURIE format and adding
        // namespaces. Then add a link to this error that says 'For more info'.
        $error .= t('Term %term must be in CURIE format.', array('%term'=>$term));
      }
    }
    
    if ($error) {
      form_set_error($field_id, $error);
    }
  }
}

/**
 * Sets a form error if datatype don't validate.
 */
function _rdfui_validate_datatype($form_state, $field_name) {

  // validate datatype
  if ($datatype = trim($form_state['values']['rdf_'. $field_name .'_datatype'])) {
    if(!preg_match(RDFUI_CURIE_REGEX, $datatype))    
      form_set_error('rdf_'. $field_name .'_datatype', t('Datatype %datatype is an invalid format.', array('%datatype'=>$datatype)));
  }

}

/**
 * Saves the mapping
 */

function _rdfui_mapping_save($form_state, $object_type, $bundle, $field_name) {
  
  // @ todo Why would we need this mapping_load? I think we don't
  $mapping = rdf_mapping_load($object_type, $bundle);
  // Set the RDF type if it is in this form.
  if (isset($form_state['values']['rdf_rdftype'])) {
    $mapping['rdftype'] = array_unique(explode("\n",$form_state['values']['rdf_rdftype']));;
  }
  // Set the predicates for the field.
  $predicates = array_unique(explode("\n",$form_state['values']['rdf_'. $field_name .'_predicates']));
  $mapping[$field_name]['predicates'] = array_map('trim', $predicates);
  $mapping[$field_name]['datatype'] = $form_state['values']['rdf_'. $field_name .'_datatype'];
  $mapping[$field_name]['type'] = $form_state['values']['rdf_'. $field_name .'_type'];
  
  $mapping_info = array(
    'mapping' => $mapping,
    'type' => $object_type,
    'bundle' => $bundle
  );
  //dpm($mapping_info);
  rdf_mapping_save($mapping_info);
}

/**
 * Returns HTML for a term.
 *
 * @param $term
 *   An associative array containing:
 *   - term: A render element representing the term.
 *      - curie: The term's compact URI.
 *      - label: The term's human readable label.
 *      - comment: A description of the term.
 *
 * @ingroup themeable
 */
function theme_rdfui_term_autocomplete($variables) {
  $term = $variables['term'];
  
  $output = '<span class="form-item rdf-term-autocomplete">';
  $output .= $term->curie;
  $output .= '<span class="rdf-label-autocomplete">' . $term->label . '</span>';
  $output .= '<span class="rdf-comment-autocomplete">' . $term->comment . '</span>';
  $output .= '</span>';
  
  return $output;
}